package cn.link.sort;

/**
 * 堆排序
 * <p>
 * 堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。
 * <p>
 * 堆是具有以下性质的完全二叉树：
 * 大顶堆：每个结点的值都大于或等于其左右孩子结点的值，arr[i] >= arr[2*i+1] && arr[i] >= arr[2*i+2]。
 * 小顶堆：每个结点的值都小于或等于其左右孩子结点的值，arr[i] <= arr[2*i+1] && arr[i] <= arr[2*i+2]。
 * 一般升序采用大顶堆，降序采用小顶堆
 * <p>
 * 注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。
 *
 * @author Link50
 * @version 1.0
 * @date 2021/5/27 20:22
 */
public class HeapSort {

    /**
     * 堆排序的基本思想是：
     * 1. 将待排序序列构造成一个大顶堆
     * 2. 此时，整个序列的最大值就是堆顶的根节点。
     * 3. 将其与末尾元素进行交换，此时末尾就为最大值。
     * 4. 然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。
     * <p>
     * 可以看到在构建大顶堆的过程中，元素的个数逐渐减少，最后就得到一个有序序列了.
     *
     * @param arr
     */
    public void sort(int[] arr) {

    }

}
